/*{
  "type": "action",
  "targets": ["omnifocus"],
  "author": "Henry Gustafson",
  "identifier": "com.github.lizard-heart.omni-focus-start-toggl-timer",
  "version": "1.0",
  "description": "Run this automation when highlighting a task to start a timer in toggl with the task name as the description, project name as project, and any tags attached to the OmniFocus task.",
  "label": "Start Toggl Timer",
  "shortLabel": "Start Timer"
}*/

(() => {
  // add your toggl api token here
  const api_key = "api key";

  const AuthHeader = `Basic ${btoa(`${api_key}:api_token`)}`;

  const buildErrorObject = (r) => ({
    statusCode: r.statusCode,
    data: r.bodyString,
  });


  // this function makes a fetch request to the toggl api
  async function startTimer(timeEntry) {
    const fetchRequest = new URL.FetchRequest();
    fetchRequest.bodyData = Data.fromString(
      JSON.stringify({
        time_entry: timeEntry,
      })
    );
    fetchRequest.method = 'POST';
    fetchRequest.headers = {
      Authorization: AuthHeader,
      ['Content-Type']: 'application/json',
    };
    fetchRequest.url = URL.fromString(
      'https://api.track.toggl.com/api/v8/time_entries/start'
    );
    const r = await fetchRequest.fetch();

    return JSON.parse(r.bodyString).data;
  }

  async function createTogglProject(name) {
    const fetchRequest = new URL.FetchRequest();
    fetchRequest.bodyData = Data.fromString(JSON.stringify({project: {name}}));
    fetchRequest.method = 'POST';
    fetchRequest.headers = {
      Authorization: AuthHeader,
      ['Content-Type']: 'application/json',
    };
    fetchRequest.url = URL.fromString(
      'https://api.track.toggl.com/api/v8/projects'
    );
    const r = await fetchRequest.fetch();

    if (r.statusCode !== 200) {
      throw buildErrorObject(r);
    }

    return JSON.parse(r.bodyString).data;
  }

  async function getTogglProjects() {
    const fetchRequest = new URL.FetchRequest();
    fetchRequest.method = 'GET';
    fetchRequest.headers = {
      Authorization: AuthHeader,
      ['Content-Type']: 'application/json',
    };
    fetchRequest.url = URL.fromString(
      `https://api.track.toggl.com/api/v8/me?with_related_data=true`
    );
    const r = await fetchRequest.fetch();
    console.log(r)


    if (r.statusCode !== 200) {
      throw buildErrorObject(r);
    }

    return JSON.parse(r.bodyString).data.projects;
  }

  async function log(message, title = 'Log') {
    const a = new Alert(title, message);
    a.addOption('OK');
    await a.show();
  }

  var action = new PlugIn.Action(async function (selection) {
    try {

      let projects = [];

      try {
        projects = await getTogglProjects();
      } catch (e) {
        await log(
          'An error occurred getting projects',
          'See console for more info'
        );
        console.log(e);
      }

      var isProject = false
      if (selection.tasks.length == 0) {
        isProject = true
      }

      if (isProject == true) {
        console.log("true")
        let taskName = "";
        let projectName = "";
        let projectNameWhole = selection.projects[0].name
        if (projectNameWhole.includes(":")){
          projectName = projectNameWhole.split(": ")[0]
          taskName = projectNameWhole.split(": ")[1]
        } else {
          projectName = projectNameWhole
          // taskName = task.name
        }
        console.log(projectNameWhole)
        let task = selection.projects[0]
        const taskTags = task.tags.map((t) => t.name);
        const TogglTags = []
        for (var i = 0; i < taskTags.length; i++) {
              if (String(taskTags[i]).includes("Toggl")) {
                  TogglTags.push(taskTags[i].slice(5))
              }
          }
        console.log(TogglTags)

        const togglProject = projects.find(
          (p) => p.name.trim().toLowerCase() === projectName.trim().toLowerCase()
        );

        let pid;
        if (!projectName) {
          pid = null;
        } else if (!togglProject) {
          console.log(`creating project in toggl called ${projectName} because it was not found`);
          try {
            const r = await createTogglProject(projectName);
            console.log(`project created with id: ${r.id}`);
            pid = r.id;
          } catch (e) {
            console.log(`error creating project ${projectName}`);
            console.log(e);
          }
        } else {
          pid = togglProject.id;
        }

        try {
          const r = await startTimer({
            description: taskName,
            created_with: 'OmniFocus-automation',
            tags: TogglTags,
            pid,
          });
          console.log('Timer started successfully', JSON.stringify(r));
        } catch (e) {
          await log('An error occurred', 'See the console for more info');
          console.log(JSON.stringify(e, null, 2));
        }
      } else {
        const task = selection.tasks[0]

        let taskName = "";
        let projectNameWhole = task.containingProject && task.containingProject.name;
        let projectName = ""
        if (projectNameWhole.includes(":")){
          projectName = projectNameWhole.split(": ")[0]
          taskName = projectNameWhole.split(": ")[1] + ": " + task.name
        } else {
          projectName = projectNameWhole
          taskName = task.name
        }



        const togglProject = projects.find(
          (p) => p.name.trim().toLowerCase() === projectName.trim().toLowerCase()
        );



        let pid;
        if (!projectName) {
          pid = null;
        } else if (!togglProject) {
          console.log(`creating project in toggl called ${projectName} because it was not found`);
          try {
            const r = await createTogglProject(projectName);
            console.log(`project created with id: ${r.id}`);
            pid = r.id;
          } catch (e) {
            console.log(`error creating project ${projectName}`);
            console.log(e);
          }
        } else {
          pid = togglProject.id;
        }
        console.log('pid is: ', pid);

        const taskTags = task.tags.map((t) => t.name);

        const TogglTags = []
        for (var i = 0; i < taskTags.length; i++) {
              if (String(taskTags[i]).includes("Toggl")) {
                  TogglTags.push(taskTags[i].slice(5))
              }
          }
          console.log(TogglTags)

        try {
          const r = await startTimer({
            description: taskName,
            created_with: 'OmniFocus-automation',
            tags: TogglTags,
            pid,
          });
          console.log('Timer started successfully', JSON.stringify(r));
        } catch (e) {
          await log('An error occurred', 'See the console for more info');
          console.log(JSON.stringify(e, null, 2));
        }

      } //end brace


    } catch (e) {
      await log('An error occurred', 'See console for more info');
      console.log(JSON.stringify(e, null, 2));
    }


  });

  // action.validate = function (selection, sender) {
  //   return selection.tasks.length === 1;
  // };

  // Here I'm using https://github.com/MaxArt2501/base64-js/blob/master/base64.js
  function btoa(stringParam) {
    const b64 =
      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    const string = String(stringParam);
    var bitmap,
      a,
      b,
      c,
      result = '',
      i = 0,
      rest = string.length % 3;

    for (; i < string.length; ) {
      if (
        (a = string.charCodeAt(i++)) > 255 ||
        (b = string.charCodeAt(i++)) > 255 ||
        (c = string.charCodeAt(i++)) > 255
      ) {
        throw "Error";
      }

      bitmap = (a << 16) | (b << 8) | c;
      result +=
        b64.charAt((bitmap >> 18) & 63) +
        b64.charAt((bitmap >> 12) & 63) +
        b64.charAt((bitmap >> 6) & 63) +
        b64.charAt(bitmap & 63);
    }
    return rest ? result.slice(0, rest - 3) + '==='.substring(rest) : result;
  }

  return action;
})();
